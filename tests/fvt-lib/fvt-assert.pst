object fail(string msg) {
    Array<object> args = new Array<object>(1);
    args[0] = msg;

    // TODO: Fix the C# bug where the ternary tries to get ignored
    object ignored = Core.ExtensibleCallbackInvoke("fail", args);
    return ignored;
}

void assertEqStr(string expected, string actual) {
    // Java support requires this juggling as string comparison is based on
    // invoking .equals() on a non-null instance.
    if (expected == actual) return; // both null or happen to be same ref
    if (expected != null && actual != null) {
        if (Core.StringEquals(expected, actual)) return;
    }

    // if only one was null or they were both non-null and didn't, match then they failed.

    string a = "null";
    if (expected != null) a = expected;
    string b = "null";
    if (actual != null) b = actual;

    fail("Expected:\n" + a + "\n\nActual:\n" + b);
}

void assertEqInt(int expected, int actual) {
    assertEqStr(Core.IntToString(expected), Core.IntToString(actual));
}

void assertEqBool(bool expected, bool actual) {
    // TODO: I really need to improve my toString() game.
    string eb = "false";
    if (expected) eb = "true";
    string ab = "false";
    if (actual) ab = "true";
    assertEqStr(eb, ab);
}
