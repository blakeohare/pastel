@import("fvt-assert.pst");

void runner() {
    testArrays();
    testLists();
    testDictionaries();
}

void testArrays() {
    Array<int> nums = new Array<int>(3);
    nums[0] = 1;
    nums[1] = 2;
    nums[2] = 3;

    int sum = 0;
    for (int i = 0; i < nums.Size(); i += 1) {
        sum += nums[i];
    }
    assertEqInt(6, sum);
}

void testArrayInitDefaultValue() {
    int[] intArr = new int[3];
    assertEqStr("0", intArr[1] + "");

    double[] floatArr = new double[3];
    assertEqStr("0.0", floatArr[1] + "");

    string[] strArr = new string[3];
    if (strArr[1] != null) fail("string[] should have nulls as initial values.");

    bool[] boolArr = new bool[3];
    assertEqStr("false", boolArr[1] + "");

    char[] charArr = new char[3];
    if (charArr[1] != '\0') fail("char[] should have null-term as initial values.");

    List<int>[] listArr = new List<int>[3];
    if (listArr[1] != null) fail("array-of-lists should have nulls as initial values.");

    object[] objArr = new object[3];
    if (objArr[1] != null) fail("object-array should have nulls as initial values.");

    int[][] intJaggyArr = new int[][3];
    if (intJaggyArr[1] != null) fail("jaggy-array should have nulls as initial values.");
}

void testLists() {
    List<int> nums = new List<int>();
    nums.Add(1);
    nums.Add(2);
    nums.Add(3);

    int sum = 0;
    for (int i = 0; i < nums.Size(); i += 1) {
        sum += nums[i];
    }
    assertEqInt(6, sum);
}

void testDictionaries() {
    Dictionary<string, int> nums = new Dictionary<string, int>();
    nums["a"] = 1;
    nums["b"] = 2;
    nums["c"] = 3;

    int sum = 0;
    Array<string> keys = nums.Keys();
    for (int i = 0; i < keys.Size(); i += 1) {
        sum += nums[keys[i]];
    }
    assertEqInt(6, sum);

    assertTrue(nums.Contains("a"));
    assertFalse(nums.Contains("d"));

    nums.Remove("b");
    assertFalse(nums.Contains("b"));
    assertEqInt(2, nums.Keys().Size());

    Array<int> vals = nums.Values();
    assertEqInt(2, vals.Size());
    assertEqInt(4, vals[0] + vals[1]);
}
