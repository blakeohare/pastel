void runner() {
    testConcatAll();
    testSlicingAndDicing();
    testStartsEndsWith();
    testTrim();
    testLowerUpper();
    testReverse();
    testCharacters();
    testCharCode();
    testCompare();
    testSplit();
    testSubStringEqual();
    testReplace();
}

void testLowerUpper() {
    string s = ""
        + "abc XYZ 123 .?" // ASCII
        + " ëËæÆçÇìÌ" // accents
        + " あ ア 阿 아" // CJK

        // TODO: behavior for cyrillic is different in various target languages
        // + " А" // Cyrillic
        ;

    assertEqStr("ABC XYZ 123 .? ËËÆÆÇÇÌÌ あ ア 阿 아", s.ToUpper());
    assertEqStr("abc xyz 123 .? ëëææççìì あ ア 阿 아", s.ToLower());
}

void testTrim() {
    string FW_SPACE = ""; // "　";
    string padding = " \r\n\t" + FW_SPACE;
    string testStr = padding + "." + padding;
    assertEqStr(
        readableWrap("."),
        readableWrap(testStr.Trim()));
    assertEqStr(
        readableWrap("." + padding),
        readableWrap(testStr.TrimStart()));
    assertEqStr(
        readableWrap(padding + "."),
        readableWrap(testStr.TrimEnd()));
}

void testReverse() {
    assertEqStr("321 cba", "abc 123".Reverse());
    assertEqStr("おえういあ 321 cba", "abc 123 あいうえお".Reverse());
}

void testCharacters() {
    char c = 'x';
    int charCode = Core.Ord(c);
    assertEqInt(charCode, 96 + 24);
    char cRoundTrip = Core.Chr(charCode + 1);
    assertEqChar('y', cRoundTrip);

    assertEqStr("yz", cRoundTrip + "z");
    assertEqStr("xy", "x" + cRoundTrip);

    string zero = "零";
    string foo = zero + "1234";

    char c2 = foo[2];
    assertEqStr("2", "" + c2);

    char c0 = foo[0];
    assertEqStr(zero, "" + c0);
}

string readableWrap(string v) {
    return "[" + v + "]";
}

void testConcatAll() {
    // Not a good way to check but look at the generated code to see if this whole line is concatenated into a single StringBuilder pattern, if applicable.
    string val = "a" + passThruInt(2) + "c" + passThruInt(4) + "e";
    assertEqStr("a2c4e", val);
}

void testSlicingAndDicing() {
    string nums = "012三4五67八9";
    assertEqInt(10, nums.Size());
    assertEqStr("012", nums.SubString(0, 3));
    assertEqStr("012三", nums.SubString(0, 4));
    assertEqStr("三4五6", nums.SubString(3, 4));
}

void testStartsEndsWith() {
    string haystack = "0123456";
    assertTrue(haystack.StartsWith("012"));
    assertTrue(haystack.EndsWith("456"));
    assertFalse(haystack.StartsWith("1"));
    assertFalse(haystack.EndsWith("5"));
}

void testCompare() {
    string a = "A";
    string b = "B";
    string b2 = b;
    assertFalse(Core.StringCompareIsReverse(a, b));
    assertTrue(Core.StringCompareIsReverse(b, a));
    assertFalse(Core.StringCompareIsReverse(b, b2));
}

void testCharCode() {
    string s = "abc";
    assertEqInt(98, s.CharCodeAt(1));
}

void testSplit() {
    string toSplit = "this is  a string ";
    string[] parts = toSplit.Split(" ");
    assertEqInt(6, parts.Size());
    assertEqStr("this", parts[0]);
    assertEqStr("", parts[2]);
    assertEqStr("", parts[5]);
    assertEqStr("string", parts[4]);
}

void testSubStringEqual() {
    string test = "0123456789";
    assertTrue(test.SubStringIsEqualTo(0, "012"));
    assertTrue(test.SubStringIsEqualTo(8, "89"));
    assertTrue(test.SubStringIsEqualTo(4, ""));
    assertTrue(test.SubStringIsEqualTo(0, "0123456789"));
    assertFalse(test.SubStringIsEqualTo(1, "0123"));
}

void testReplace() {
    string test = "12345";
    string testSequences = "aaaaa";
    assertEqStr("12THREE & FOUR5", test.Replace("34", "THREE & FOUR"));
    assertEqStr("12THREE & FOUR5", test.Replace("34", "THREE & FOUR"));
    assertEqStr("bba", testSequences.Replace("aa", "b"));
}
