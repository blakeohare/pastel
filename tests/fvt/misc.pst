@import("fvt-assert.pst");
@import("fvt-convert.pst");

int passThruInt(int x) { return x; }
double passThruFloat(double x) { return x; }
string passThruString(string x) { return x; }
bool passThruBool(bool x) { return x; }

void runner() {
    testUnixTime();
    testBase64();
    testGoQuickImpl();
    testOps();
    testStringConcat();
    testInlineOptimization();
    testFloatToString();
}

void testBase64() {
    Array<int> buf = Core.Base64ToBytes("ABCD");
    // 000000 000001 000010 000011
    // 00000000 00010000 10000011
    assertEqInt(buf[0], 0x00);
    assertEqInt(buf[1], 0x10);
    assertEqInt(buf[2], 0x83);

    buf[2] = buf[2] + 1;

    string bufInv = Core.BytesToBase64(buf);
    assertEqStr("ABCE", bufInv);
}

void testUnixTime() {
    double now = Core.CurrentTimeSeconds();
    assertTrue(now > 1746108176);
    assertTrue(now < 0x7FFFFFFF);
}

// Go is missing a bunch of basic stuff, adding it here to exercise the codepath
void testGoQuickImpl() {
    string s = Core.FloatToString(37.5);
    assertEqStr("37.5", s);

    List<int> nums = new List<int>();
    assertEqInt(0, nums.Size());
    nums.Add(42);
    assertEqInt(1, nums.Size());
    nums.Clear();
    assertEqInt(0, nums.Size());

    List<int> a = new List<int>();
    List<int> b = new List<int>();
    a.Add(1);
    a.Add(2);
    b.Add(3);
    b.Add(4);
    List<int> c = Core.ListConcat(a, b);
    assertEqInt(4, c.Size());
    assertEqInt(2, b.Size());
    a.Add(5);
    assertEqInt(4, c.Size());
    assertEqInt(3, a.Size());

    int x = 42;
    x = -x;
    assertEqStr("-42", Core.IntToString(x));

    assertTrue(Core.RandomFloat() >= 0);
    assertTrue(Core.RandomFloat() < 1);

    assertEqStr(
        "\"abc\\n123\\r\\n'\"",
        Core.ToCodeString("abc\n123\r\n'"));
}

void testOps() {

    assertEqInt(7, passThruInt(3) + 4);
    assertEqInt(7, 3 + 4);
    assertEqInt(-1, passThruInt(3) - 4);
    assertEqInt(-1, 3 - 4);
    assertEqInt(12, passThruInt(3) * 4);
    assertEqInt(12, 3 * 4);
    // TODO: automatically use appropriate division based on type
    // assertEqInt(0, passThruInt(3) / 4);
    // assertEqInt(0, 3 / 4);
    assertEqInt(7, passThruInt(3) | 4);
    assertEqInt(7, 3 | 4);
    assertEqInt(0, passThruInt(3) & 4);
    assertEqInt(0, 3 & 4);
    assertEqInt(7, passThruInt(3) ^ 4);
    assertEqInt(7, 3 ^ 4);
    assertEqInt(48, passThruInt(3) << 4);
    assertEqInt(48, 3 << 4);
    assertEqInt(18, passThruInt(300) >> 4);
    assertEqInt(18, 300 >> 4);

    // TODO: remove the FloatToString conversions as they should be automatic now.
    assertEqStr("7.0", Core.FloatToString(passThruFloat(3.0) + 4) + "");
    assertEqStr("7.0", Core.FloatToString(3.0 + 4) + "");
    assertEqStr("-1.0", Core.FloatToString(passThruFloat(3.0) - 4) + "");
    assertEqStr("-1.0", Core.FloatToString(3.0 - 4) + "");
    assertEqStr("12.0", Core.FloatToString(passThruFloat(3.0) * 4) + "");
    assertEqStr("12.0", Core.FloatToString(3.0 * 4) + "");
    // TODO: automatically use appropriate division based on type
    // assertEqInt("0.75", passThruFloat(3.0) / 4);
    // assertEqInt("0.75", 3.0 / 4);

    assertEqStr("7.0", Core.FloatToString(passThruInt(3) + 4.0) + "");
    assertEqStr("7.0", Core.FloatToString(3 + 4.0) + "");
    assertEqStr("-1.0", Core.FloatToString(passThruInt(3) - 4.0) + "");
    assertEqStr("-1.0", Core.FloatToString(3 - 4.0) + "");
    assertEqStr("12.0", Core.FloatToString(passThruInt(3) * 4.0) + "");
    assertEqStr("12.0", Core.FloatToString(3 * 4.0) + "");
    // TODO: automatically use appropriate division based on type
    // assertEqInt("0.75", passThruInt(3) / 4.0);
    // assertEqInt("0.75", 3 / 4.0);
}

void testStringConcat() {
    string a = "a";
    string b = "b";
    string c = "c";
    assertEqStr("abc", a + b + c);
    assertEqStr("abc", "a" + "b" + c);
    assertEqStr("1bc", 1 + b + c);
    assertEqStr("a2c", a + 2 + c);
    assertEqStr("ab3", a + b + 3);
    assertEqStr("abc", a + "" + b + "" + c);
}

void testInlineOptimization() {
    assertEqInt(7, passThruInt(3) + 4);
    assertEqInt(7, 3 + 4);
}

void testOneOffStuff() {
    int value = 1;
    assertEqStr("true", Core.BoolToString(value == 1));
    assertEqStr("true", Core.BoolToString(value == 2));
    assertEqStr("true", Core.BoolToString(true));
    assertEqStr("false", Core.BoolToString(false));

    @import("inline.pst");
    assertEqInt(42, x);
}

// TODO: negative nums
void testFloatToString() {
    string empty = "";
    double zero = 0.0;
    assertEqStr("3.0", zero + 3 + empty);
    assertEqStr("1.5", zero + 1.5 + empty);
    assertEqStr("0.0", zero + 0 + empty);
    assertEqStr("0.1", zero + 0.1 + empty);
    assertEqStr("0.01", zero + 0.01 + empty);
    assertEqStr("0.001", zero + 0.001 + empty);

    // TODO: uncomment these after consistency is added.
    /*
        assertEqStr("0.0001", zero + 0.0001 + empty);
        assertEqStr("0.00001", zero + 0.00001 + empty);
        assertEqStr("0.000001", zero + 0.000001 + empty);
        assertEqStr("1.0e-7", zero + 0.0000001 + empty);
        assertEqStr("1.0e-8", zero + 0.00000001 + empty);
        assertEqStr("1.0e-9", zero + 0.000000001 + empty);


        assertEqStr("100000000000000.0", zero + 100000000000000.0 + empty);
        assertEqStr("999999999999999.0", zero + 999999999999999.0 + empty);
        assertEqStr("1.0e+16", zero + 1000000000000000.0 + empty);
    */

    double pointOne = .1;
    assertEqStr("0.19999999999999998", .3 - pointOne + empty);
}
