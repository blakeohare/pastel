@import("fvt-assert.pst");
@import("fvt-convert.pst");

void runner() {
    testUnixTime();
    testBase64();
    testGoQuickImpl();
}

void testBase64() {
    Array<int> buf = Core.Base64ToBytes("ABCD");
    // 000000 000001 000010 000011
    // 00000000 00010000 10000011
    assertEqInt(buf[0], 0x00);
    assertEqInt(buf[1], 0x10);
    assertEqInt(buf[2], 0x83);

    buf[2] = buf[2] + 1;

    string bufInv = Core.BytesToBase64(buf);
    assertEqStr("ABCE", bufInv);
}

void testUnixTime() {
    double now = Core.CurrentTimeSeconds();
    assertTrue(now > 1746108176);
    assertTrue(now < 0x7FFFFFFF);
}

// Go is missing a bunch of basic stuff, adding it here to exercise the codepath
void testGoQuickImpl() {
    string s = Core.FloatToString(37.5);
    assertEqStr("37.5", s);

    List<int> nums = new List<int>();
    assertEqInt(0, nums.Size());
    nums.Add(42);
    assertEqInt(1, nums.Size());
    nums.Clear();
    assertEqInt(0, nums.Size());

    List<int> a = new List<int>();
    List<int> b = new List<int>();
    a.Add(1);
    a.Add(2);
    b.Add(3);
    b.Add(4);
    List<int> c = Core.ListConcat(a, b);
    assertEqInt(4, c.Size());
    assertEqInt(2, b.Size());
    a.Add(5);
    assertEqInt(4, c.Size());
    assertEqInt(3, a.Size());

    int x = 42;
    x = -x;
    assertEqStr("-42", Core.IntToString(x));

    assertTrue(Core.RandomFloat() >= 0);
    assertTrue(Core.RandomFloat() < 1);

    assertEqStr(
        "\"abc\\n123\\r\\n'\"",
        Core.ToCodeString("abc\n123\r\n'"));
}
