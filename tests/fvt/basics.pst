void runner() {
    testShortcircuiting();
    testSwitch();
}

void testShortcircuiting() {
    List<string> log = new List<string>();
    if (passThruBoolWithLog(true, log, "A") && passThruBoolWithLog(true, log, "B")) {
        passThruBoolWithLog(true, log, "C");
    }
    assertEqStr("ABC", log.join(""));
    log.clear();

    if (passThruBoolWithLog(true, log, "A") && passThruBoolWithLog(false, log, "B")) {
        passThruBoolWithLog(true, log, "C");
    }
    assertEqStr("AB", log.join(""));
    log.clear();

    if (passThruBoolWithLog(true, log, "A") || passThruBoolWithLog(true, log, "B")) {
        passThruBoolWithLog(true, log, "C");
    }
    assertEqStr("AC", log.join(""));
    log.clear();

    if (passThruBoolWithLog(false, log, "A") || passThruBoolWithLog(true, log, "B")) {
        passThruBoolWithLog(true, log, "C");
    }
    assertEqStr("ABC", log.join(""));
    log.clear();

    if (passThruBoolWithLog(false, log, "A") || passThruBoolWithLog(true, log, "B") || passThruBoolWithLog(true, log, "C")) {
        passThruBoolWithLog(true, log, "D");
    }
    assertEqStr("ABD", log.join(""));
    log.clear();
}

bool passThruBoolWithLog(bool val, List<string> log, string logItem) {
    log.add(logItem);
    return val;
}

// TODO: this SHOULD resolve at compile time but isn't.
// const int SWITCH_WORKS = !IS_GO && !IS_PYTHON;

void testSwitch() {
    if (IS_GO) { }
    else if (IS_PYTHON) { }
    else {

        assertEqStr("1: EF", "1: " + runSwitchInt(-1));
        assertEqStr("2: AF", "2: " + runSwitchInt(0));
        assertEqStr("3: AF", "3: " + runSwitchInt(1));
        assertEqStr("4: EF", "4: " + runSwitchInt(2));
        assertEqStr("5: BF", "5: " + runSwitchInt(3));
        assertEqStr("6: CF", "6: " + runSwitchInt(4));
        assertEqStr("7: CDF", "7: " + runSwitchInt(5));
        assertEqStr("8: EF", "8: " + runSwitchInt(6));
        assertEqStr("9: EF", "9: " + runSwitchInt(7));
    }
}

string runSwitchInt(int cond) {
    List<string> log = new List<string>();
    if (IS_GO) { }
    else if (IS_PYTHON) { }
    else {
        switch (cond) {
            case 0:
            case 1:
                log.add("A");
                break;
            case 3:
                log.add("B");
                break;
            case 4:
            case 5:
                log.add("C");
                if (cond == 4) {
                    break;
                }
                log.add("D");
                break;
            case 6:
            default:
                log.add("E");
                break;
        }
        log.add("F");
    }
    return log.join("");
}

// TODO: add support for string switch statements.
/*
string runSwitchString(int cond) {
    List<string> log = new List<string>();
    if (IS_GO) { }
    else if (IS_PYTHON) { }
    else {
        switch (cond) {
            case "zero":
            case "one":
                log.add("A");
                break;
            case "three":
                log.add("B");
                break;
            case "four":
            case "five":
                log.add("C");
                if (cond == 4) {
                    break;
                }
                log.add("D");
                break;
            case "six":
            default:
                log.add("E");
                break;
        }
        log.add("F");
    }
    return log.join("");
}
*/
