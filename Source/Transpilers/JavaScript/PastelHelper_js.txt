// PASTEL_ENTITY_ID: PST$sortedCopyOfArray
let PST$sortedCopyOfArray = v => {
	let o = [...v];
	if (o.length < 2) return o;
	if (typeof(o[0]) === 'number') return o.sort((a, b) => a - b);
	return o.sort();
};

// PASTEL_ENTITY_ID: PST$multiplyList
let PST$multiplyList = (l, n) => {
	let a = [];
	while (n-- > 0) a.push(...l);
	return a;
}

// PASTEL_ENTITY_ID: PST$checksubstring
let PST$checksubstring = (s, index, lookfor) => s.substring(index, index + lookfor.length) === lookfor;

// PASTEL_ENTITY_ID: PST$floatParseHelper
let PST$floatParseHelper = (o, s) => {
	o[0] = -1;
	let t = parseFloat(s);
	if (isNaN(t) || !isFinite(t)) return;
	o[0] = 1;
	o[1] = t;
};

// PASTEL_ENTITY_ID: PST$createNewArray
let PST$createNewArray = (s, val) => {
	let o = [];
	while (s --> 0) o.push(val);
	return o;
};

// PASTEL_ENTITY_ID: PST$clearList
let PST$clearList = a => {
	while (a.length) a.pop();
};

// PASTEL_ENTITY_ID: PST$shuffle
let PST$shuffle = arr => {
	let len = arr.length;
	let j;
	let t;
	for (let i = 0; i < len; i++) {
		j = Math.floor(Math.random() * len);
		t = arr[j];
		arr[j] = arr[i];
		arr[i] = t;
	}
};

// PASTEL_ENTITY_ID: PST_ExtCallbacks
let PST$extCallbacks = {};

// PASTEL_ENTITY_ID: PST_RegisterExtensibleCallback
let PST$registerExtensibleCallback = (name, fn) => { PST$extCallbacks[name] = fn; };

// PASTEL_ENTITY_ID: PST$stdout
let PST$stdout = v => { console.log(v); };

// PASTEL_ENTITY_ID: PST$stderr
let PST$stderr = v => { console.error(v); };

// PASTEL_ENTITY_ID: PST$stringToUtf8Bytes
let PST$stringToUtf8Bytes = s => Array.from(new TextEncoder().encode(s));

// PASTEL_ENTITY_ID: PST$b64Alpha
let PST$b64Alpha = (() => {
    let letters = 'abcdefghijklmnopqrstuvwxyz';
    let alpha = letters.toUpperCase() + letters + '0123456789+/';
    let inv = {};
    for (let i = 0; i < 64; i++) inv[alpha[i]] = i;
    return { alpha, inv };
})();

// PASTEL_ENTITY_ID: PST$b64ToBytes
let PST$b64ToBytes = s => {
    let len = s.length;
    while (len && s[len - 1] === '=') len--;
    let pairs = [];
    let c;
    let lookup = PST$b64Alpha.inv;
    for (let i = 0; i < len; i++) {
        c = lookup[s[i]];
        pairs.push((c >> 4) & 3, (c >> 2) & 3, c & 3);
    }
    while (pairs.length % 4) pairs.pop();
    let buf = [];
    len = pairs.length;
    for (let i = 0; i < len; i += 4) {
        buf.push((pairs[i] << 6) | (pairs[i + 1] << 4) | (pairs[i + 2]) | (pairs[i + 3]));
    }
    return buf;
};

// PASTEL_ENTITY_ID: PST$bytesToB64
let PST$bytesToB64 = arr => {
  let sz = arr.length;
  let pairs = [];
  let { alpha } = PST$b64Alpha;
  let b;
  for (let i = 0; i < sz; i++){
    b = arr[i];
    pairs.push((b >> 6) & 3, (b >> 4) & 3, (b >> 2) & 3, b & 3);
  }
  while (pairs.length % 3) pairs.push(0);
  let output = '';
  for (let i = 0; i < pairs.length; i += 3) {
    output += alpha[(pairs[i] << 4) | (pairs[i + 1] << 2) | pairs[i + 2]];
  }
  while (output.length % 4) output += '=';
  return output;
};

// PASTEL_ENTITY_ID: PST$floatToStr
let PST$floatToStr = f => {
    let s = f + '';
    return s.includes('.') ? s : (s + '.0');
};
