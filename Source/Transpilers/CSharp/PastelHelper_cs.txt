// PASTEL_ENTITY_ID: PST_Random
private static readonly System.Random PST_Random = new System.Random();

// PASTEL_ENTITY_ID: AlwaysTrue
public static bool AlwaysTrue() { return true; }

// PASTEL_ENTITY_ID: AlwaysFalse
public static bool AlwaysFalse() { return false; }

// PASTEL_ENTITY_ID: PST_StringReverse
public static string PST_StringReverse(string value)
{
    if (value.Length < 2) return value;
    char[] chars = value.ToCharArray();
    return new string(chars.Reverse().ToArray());
}

// PASTEL_ENTITY_ID: PST_SplitSep
private static readonly string[] PST_SplitSep = new string[1];

// PASTEL_ENTITY_ID: PST_StringSplit
private static string[] PST_StringSplit(string value, string sep)
{
    if (sep.Length == 1) return value.Split(sep[0]);
    if (sep.Length == 0) return value.ToCharArray().Select<char, string>(c => "" + c).ToArray();
    PST_SplitSep[0] = sep;
    return value.Split(PST_SplitSep, System.StringSplitOptions.None);
}

// PASTEL_ENTITY_ID: PST_FloatToString
private static string PST_FloatToString(double value)
{
    string output = value.ToString();
    if (output[0] == '.') output = "0" + output;
    if (!output.Contains('.')) output += ".0";
    return output;
}

// PASTEL_ENTITY_ID: PST_UnixEpoch
private static readonly System.DateTime PST_UnixEpoch = new System.DateTime(1970, 1, 1);

// PASTEL_ENTITY_ID: PST_CurrentTime
private static double PST_CurrentTime
{
    get { return System.DateTime.UtcNow.Subtract(PST_UnixEpoch).TotalSeconds; }
}

// PASTEL_ENTITY_ID: PST_Base64ToString
private static string PST_Base64ToString(string b64Value)
{
    byte[] utf8Bytes = System.Convert.FromBase64String(b64Value);
    string value = System.Text.Encoding.UTF8.GetString(utf8Bytes);
    return value;
}

// PASTEL_ENTITY_ID: PST_IsValidInteger
// TODO: use a model like parse float to avoid double parsing.
public static bool PST_IsValidInteger(string value)
{
    if (value.Length == 0) return false;
    char c = value[0];
    if (value.Length == 1) return c >= '0' && c <= '9';
    int length = value.Length;
    for (int i = c == '-' ? 1 : 0; i < length; ++i)
    {
        c = value[i];
        if (c < '0' || c > '9') return false;
    }
    return true;
}

// PASTEL_ENTITY_ID: PST_ParseFloat
public static void PST_ParseFloat(string strValue, double[] output)
{
    double num = 0.0;
    output[0] = double.TryParse(strValue, out num) ? 1 : -1;
    output[1] = num;
}

// PASTEL_ENTITY_ID: PST_ListConcat
private static List<T> PST_ListConcat<T>(List<T> a, List<T> b)
{
    List<T> output = new List<T>(a.Count + b.Count);
    output.AddRange(a);
    output.AddRange(b);
    return output;
}

// PASTEL_ENTITY_ID: PST_MultiplyList
private static List<Value> PST_MultiplyList(List<Value> items, int times)
{
    List<Value> output = new List<Value>(items.Count * times);
    while (times-- > 0) output.AddRange(items);
    return output;
}

// PASTEL_ENTITY_ID: PST_SubstringIsEqualTo
private static bool PST_SubstringIsEqualTo(string haystack, int index, string needle)
{
    int needleLength = needle.Length;
    if (index + needleLength > haystack.Length) return false;
    if (needleLength == 0) return true;
    if (haystack[index] != needle[0]) return false;
    if (needleLength == 1) return true;
    for (int i = 1; i < needleLength; ++i)
    {
        if (needle[i] != haystack[index + i]) return false;
    }
    return true;
}

// PASTEL_ENTITY_ID: PST_ShuffleInPlace
private static void PST_ShuffleInPlace<T>(List<T> list)
{
    if (list.Count < 2) return;
    int length = list.Count;
    int tIndex;
    T tValue;
    for (int i = length - 1; i >= 0; --i)
    {
        tIndex = PST_Random.Next(length);
        tValue = list[tIndex];
        list[tIndex] = list[i];
        list[i] = tValue;
    }
}

// PASTEL_ENTITY_ID: PST_ExtCallbacks
private static Dictionary<string, System.Func<object[], object>> PST_ExtCallbacks = new Dictionary<string, System.Func<object[], object>>();

// PASTEL_ENTITY_ID: PST_RegisterExtensibleCallback
public static void PST_RegisterExtensibleCallback(string name, System.Func<object[], object> func)
{
    PST_ExtCallbacks[name] = func;
}

// PASTEL_ENTITY_ID: PST_stringToUtf8Bytes
private static int[] PST_stringToUtf8Bytes(string str)
{
    byte[] bytes = System.Text.Encoding.UTF8.GetBytes(str);
    int len = bytes.Length;
    int[] output = new int[len];
    for (int i = 0; i < len; i++)
    {
        output[i] = ((int)bytes[i]) & 255;
    }
    return output;
}

// PASTEL_ENTITY_ID: PST_ToCodeString
private static bool[] PST_ToCodeStringSafeChars = null;
private static string[] PST_ToCodeStringSwapChars = null;
private static string PST_ToCodeString(string str)
{
    int i;
    if (PST_ToCodeStringSafeChars == null)
    {
        bool[] safe = new bool[128];
        PST_ToCodeStringSafeChars = safe;
        foreach (char sc in ".,/:;'[]{}|()!@#$%^&*-_=+`~<>? ".ToCharArray())
        {
            safe[(int)sc] = true;
        }
        for (i = 0; i < 10; ++i) safe['0' + i] = true;
        for (i = 0; i < 26; ++i)
        {
            safe['A' + i] = true;
            safe['a' + i] = true;
        }
        string[] swaps = new string[128];
        swaps[0] = "\\0";
        swaps['\n'] = "\\n";
        swaps['\t'] = "\\t";
        swaps['\r'] = "\\r";
        swaps['\\'] = "\\\\";
        swaps['"'] = "\\\"";
        PST_ToCodeStringSwapChars = swaps;
    }

    char[] chars = str.ToCharArray();
    System.Text.StringBuilder sb = new System.Text.StringBuilder();
    sb.Append('"');
    int len = chars.Length;
    char c;
    int b;
    string swap;
    for (i = 0; i < len; ++i)
    {
        c = chars[i];
        b = c;
        if (b >= 0 && c < 128)
        {
            if (PST_ToCodeStringSafeChars[b])
            {
                sb.Append(c);
            }
            else
            {
                swap = PST_ToCodeStringSwapChars[b];
                if (swap != null)
                {
                    sb.Append(swap);
                }
                else
                {
                    sb.Append("\\u");
                    sb.Append(b.ToString("X4"));
                }
            }
        }
        else
        {
            sb.Append("\\u");
            sb.Append(b.ToString("X4"));
        }
    }
    sb.Append('"');
    return sb.ToString();
}

// PASTEL_ENTITY_ID: PST_ListPop
private static T PST_ListPop<T>(List<T> list)
{
    if (list.Count == 0) throw new System.InvalidOperationException();
    int lastIndex = list.Count - 1;
    T val = list[lastIndex];
    list.RemoveAt(lastIndex);
    return val;
}

// PASTEL_ENTITY_ID: PST_BytesToBase64
private static string PST_BytesToBase64(int[] arr) {
    int sz = arr.Length;
    byte[] buf = new byte[sz];
    for (int i = 0; i < sz; i++) {
        buf[i] = (byte)(255 & arr[i]);
    }
    return System.Convert.ToBase64String(buf);
}
